mutation productCreate($input: ProductInput!) {
productCreate(input: $input) {
product {
id
}
userErrors {
field
message
}
}
}

 

{
"input": {
"title": "Product Title",
"productType": "Product X",
"vendor": "Vendor X",
"descriptionHtml": "Product description",
"status": "DRAFT",
"metafields": [
{
"namespace": "custom_fields",
"key": "my_custom_field",
"type": "single_line_text_field",
"value": "Some value.."
}
]
}
}

 

-------------

 

Then using the productId generated by the previous mutation:

 

mutation productVariantsBulkCreate($productId: ID!, $strategy: ProductVariantsBulkCreateStrategy, $variants: [ProductVariantsBulkInput!]!) {
productVariantsBulkCreate(productId: $productId, strategy: $strategy, variants: $variants) {
product {
id
}
userErrors {
field
message
}
}
}

 

{
"productId": "gid://shopify/Product/123456789",
"strategy": "REMOVE_STANDALONE_VARIANT",
"variants": [
{
"inventoryItem": {
"requiresShipping": true,
"tracked": true
},
"inventoryPolicy": "DENY",
"inventoryQuantities": [
{
"availableQuantity": 1,
"locationId": "gid://shopify/Location/123456789"
},
{
"availableQuantity": 0,
"locationId": "gid://shopify/Location/987654321"
}
],
"sku": "SKU_ABC",
"taxable": true
}
]
}


// export const action = async ({ request }) => {
//   const { admin } = await authenticate.admin(request);
//   const formData = await request.formData();
//   const productData = JSON.parse(formData.get('productData'));

//   try {
//     // 1. Get location ID first
//     const locationResponse = await admin.graphql(
//       `#graphql
//       query {
//         locations(first: 10) {
//           edges {
//             node {
//               id
//               name
//               address {
//                 address1
//                 city
//                 province
//                 zip
//                 country
//               }
//             }
//           }
//         }
//       }`
//     );

//     const locationJson = await locationResponse.json();
//     console.log('Location Response:', JSON.stringify(locationJson, null, 2));

//     const locations = locationJson.data.locations.edges;
    
//     const location = locations.find(
//       ({ node }) => 
//         node.address.address1 === "550 Montgomery Street" &&
//         node.address.city === "San Francisco"
//     ) || locations.find(
//       ({ node }) => node.name === "550 Montgomery Street"
//     );

//     if (!location) {
//       console.error('Could not find location');
//       return json(
//         { errors: ["Store location not found"] },
//         { status: 422 }
//       );
//     }

//     const locationId = location.node.id;
//     console.log('Found Location ID:', locationId);

//     // 2. Create product with variants
// const productSet = {
//   title: productData.title,
//   handle: productData.mainHandle,
//   productType: productData.productType,
//   vendor: 'Little Prince Customs',
//   descriptionHtml: productData.descriptionHTML,
//   tags: productData.tags,
//   category: "gid://shopify/TaxonomyCategory/sg-4-7-7-2",
//   seo: {
//     title: productData.seoTitle,
//     description: productData.seoDescription,
//   },
//   productOptions: [
//     {
//       name: "Shape",
//       position: 1,
//       values: [...new Set(productData.variants.map(variant => variant.variantName))].map(name => ({
//         name
//       }))
//     }
//   ],
//   variants: productData.variants.map(variant => ({
//     optionValues: [
//       {
//         optionName: "Shape",
//         name: variant.variantName
//       }
//     ],
//     // inventoryQuantities: [
//     //   {
//     //     locationId: locationId,
//     //     quantity: 12,
//     //   },
//     // ],
//     price: parseFloat(variant.price),
//     compareAtPrice: parseFloat(variant.price),
//     sku: variant.sku,
//   }))
// };

//     // Create product and get response
//     const productResponse = await admin.graphql(
//       `#graphql
//       mutation createProduct($productSet: ProductSetInput!, $synchronous: Boolean!) {
//         productSet(synchronous: $synchronous, input: $productSet) {
//           product {
//             id
//             variants(first: 15) {
//               edges{  
//                 node {
//                   title
//                   price
//                   inventoryQuantity
//                   inventoryItem {
//                     id
//                     tracked
//                     inventoryLevels(first: 15) {
//                       nodes {
//                        quantities(names: ["available"]) {
//                         name
//                         quantity
//                         }
//                         location {
//                         id
//                         name
//                         }
//                       }
//                     }  
//                   }
//                 }
//               }  
//             }
//           }
//           productSetOperation {
//             id
//             status
//             userErrors {
//               field
//               message
//               code
//             }
//           }
//           userErrors {
//             field
//             message
//             code
//           }
//         }
//       }`,
//       {
//         variables: {
//           synchronous: true,
//           productSet,
//         },
//       }
//     );

//     const productResponseJson = await productResponse.json();
//     console.log('Product Creation Response:', JSON.stringify(productResponseJson, null, 2));
    
//     // Check for errors in product creation
//     const productErrors = [
//       ...(productResponseJson.data?.productSet?.userErrors || []),
//       ...(productResponseJson.data?.productSet?.productSetOperation?.userErrors || [])
//     ];

//     if (productErrors.length > 0) {
//       console.error('Product Creation Errors:', productErrors);
//       return json({ errors: productErrors }, { status: 422 });
//     }

//     // 3. Get variants and activate inventory tracking
//     const variants = productResponseJson.data.productSet.product.variants.edges;
    
//     // Process each variant sequentially
//     for (const variant of variants) {
//       console.log('Variant:', JSON.stringify(variant.node, null, 2));
//       console.log(`Processing variant with SKU: ${variant.node.sku}`);
      
//       try {
//         const activateResponse = await admin.graphql(
//           `#graphql
//           mutation inventoryBulkToggleActivation($inventoryItemId: ID!, inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) 
//             {

//               inventoryBulkToggleActivation(
//               inventoryItemId: $inventoryItemId,
//               inventoryItemUpdates: $inventoryItemUpdates) {
//                 inventoryItem {
//                   id
//                 }
//                 inventoryLevels {
//                   id
//                   quantities(names: ["available"]) 
//                   {
//                     name
//                     quantity
//                   }
//                   location {
//                     id
//                 }
//               }
//               userErrors {
//                 field
//                 message
//                 cide
//               }
//             }
//           }`,
//           {
//             variables: {
//               inventoryItemId: variant.node.inventoryItem.id,
//               inventoryItemUpdates: [ 
//                 {
//                   locationId: locationId,
//                   activate: true,
//                   // available: 4
//                 }
//               ]
//             }
//           }
//         );
    
//         const activateResponseJson = await activateResponse.json();
//         console.log('Inventory Activation Response:', JSON.stringify(activateResponseJson, null, 2));
    
//         if (activateResponseJson.errors || activateResponseJson.data?.inventoryActivate?.userErrors?.length > 0) {
//           const errors = activateResponseJson.errors || activateResponseJson.data?.inventoryActivate?.userErrors;
//           console.error('Inventory Activation Errors:', errors);
//           throw new Error(`Failed to activate inventory for variant ${variant.node.sku}: ${JSON.stringify(errors)}`);
//         }
    
//         // Add a small delay between requests to avoid rate limiting
//         await new Promise(resolve => setTimeout(resolve, 500));
    
//       } catch (error) {
//         console.error(`Error processing variant ${variant.node.sku}:`, error);
//         throw error;
//       }
//     }

//     return json({
//       product: productResponseJson.data.productSet.product,
//       success: true
//     });

//   } catch (error) {
//     console.error('GraphQL Error:', error);
//     console.log('Error Details:', {
//       message: error.message,
//       stack: error.stack
//     });
//     return json(
//       { errors: [error.message || "An unexpected error occurred"] },
//       { status: 500 }
//     );
//   }
// };