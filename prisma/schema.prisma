generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model LeatherColor {
  id                      String                  @id @default(cuid())
  name                    String                  @unique
  abbreviation            String                  @unique
  url_id                  String?
  isLimitedEditionLeather Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  colorTags               ColorTag[]              @relation("LeatherColorToTag")
  first_leather_color     ProductSetDataLPC[]     @relation("PrimaryLeatherColor")
  second_leather_color    ProductSetDataLPC[]     @relation("SecondaryLeatherColor")
  color_designation       ProductVariantDataLPC[] @relation("ColorDesignation")
}

model StitchingThread {
  id               String             @id @default(cuid())
  name             String             @unique
  abbreviation     String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  colorTags        ColorTag[]         @relation("StitchingThreadToTag")
  amannNumbers     AmannNumber[]
  productStitching ProductStitching[]
}

model EmbroideryThread {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  abbreviation          String                  @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  colorTags             ColorTag[]              @relation("EmbroideryThreadToTag")
  isacordNumbers        IsacordNumber[]
  ProductVariantDataLPC ProductVariantDataLPC[]
}

model IsacordNumber {
  id                    String                  @id @default(cuid())
  number                String                  @unique
  threadId              String?
  wawakColorName        String?
  wawakItemNumber       String?
  isStockThread         Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  thread                EmbroideryThread?       @relation(fields: [threadId], references: [id])
  ProductVariantDataLPC ProductVariantDataLPC[]

  @@index([threadId])
}

model AmannNumber {
  id               String             @id @default(cuid())
  number           String             @unique
  threadId         String?
  WawakColorName   String?
  WawakItemNumber  String?
  isStockThread    Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  thread           StitchingThread?   @relation(fields: [threadId], references: [id])
  ProductStitching ProductStitching[]

  @@index([threadId])
}

model ColorTag {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  embroideryColors EmbroideryThread[] @relation("EmbroideryThreadToTag")
  leatherColors    LeatherColor[]     @relation("LeatherColorToTag")
  stitchingColors  StitchingThread[]  @relation("StitchingThreadToTag")
}

model Font {
  id                String              @id @default(cuid())
  name              String              @unique
  url_id            String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ProductSetDataLPC ProductSetDataLPC[]
}

enum ShapeType {
  DRIVER // Base price point
  WOOD // -10 from base
  HYBRID // -15 from base
  PUTTER // Fixed price or base, whichever is higher
  LAB_PUTTER // Fixed price or base, whichever is higher
  OTHER // Keep for flexibility
}

model Shape {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  displayOrder          Int                     @default(0)
  abbreviation          String?                 @unique
  shapeType             ShapeType               @default(OTHER)
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ProductVariantDataLPC ProductVariantDataLPC[]
}

enum StyleNamePattern {
  STANDARD // "{leather.label} {style.leatherPhrase} {style.label}"
  STYLE_FIRST // "{style.label} with {leather.label} {style.leatherPhrase}"
  CUSTOM // Uses custom pattern
}

model Style {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  abbreviation          String                  @unique
  url_id                String?
  useOppositeLeather    Boolean                 @default(false)
  leatherPhrase         String?
  namePattern           StyleNamePattern        @default(STANDARD)
  customNamePattern     String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ProductVariantDataLPC ProductVariantDataLPC[]
  collections           StyleCollection[]
}

model StyleCollection {
  id                        String            @id @default(cuid())
  styleId                   String
  collectionId              String
  overrideSecondaryLeather  Boolean?
  overrideStitchingColor    Boolean?
  overrideColorDesignation  Boolean?
  skuPattern                String?
  titleTemplate             String? // Override collection title template if needed
  seoTemplate               String? // Override collection SEO template if needed
  handleTemplate            String? // Override collection handle template if needed
  validation                Json? // Override validation rules if needed
  overrideNamePattern       StyleNamePattern? // Override collection default
  overrideCustomNamePattern String? // Used with CUSTOM pattern
  style                     Style             @relation(fields: [styleId], references: [id])
  collection                ShopifyCollection @relation(fields: [collectionId], references: [id])
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt

  @@unique([styleId, collectionId])
  @@index([styleId])
  @@index([collectionId])
}

enum ThreadType {
  EMBROIDERY
  STITCHING
  NONE
}

model ShopifyCollection {
  id                      String                 @id @default(cuid())
  shopifyId               String
  title                   String
  handle                  String                 @unique
  skuPattern              String?
  threadType              ThreadType             @default(NONE)
  description             String?                @db.Text
  commonDescription       Boolean                @default(true)
  needsSecondaryLeather   Boolean                @default(false)
  needsStitchingColor     Boolean                @default(false)
  needsColorDesignation   Boolean                @default(false)
  needsStyle              Boolean                @default(false)
  defaultStyleNamePattern StyleNamePattern       @default(STANDARD)
  stylePerCollection      Boolean                @default(false)
  showInDropdown          Boolean                @default(true)
  googleDriveFolderId     String? // Added field for Google Drive folder ID
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  admin_graphql_api_id    String
  productSets             ProductSetCollection[]
  styles                  StyleCollection[]
  titleFormat             CollectionTitleFormat?
  PriceTier               PriceTier?             @relation(fields: [priceTierId], references: [id])
  priceTierId             String?                @unique

  @@map("ShopifyCollections")
}

model CommonDescription {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String   @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollectionTitleFormat {
  id             String            @id @default(cuid())
  collection     ShopifyCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId   String            @unique
  titleTemplate  String // e.g. "{leatherColor1} with {leatherColor2} Leather"
  seoTemplate    String // e.g. "{title} Quilted Golf Headcovers"
  handleTemplate String // e.g. "{handle}-quilted-golf-headcovers"
  validation     Json // Stores validation rules as JSON
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([collectionId])
}

model PriceTier {
  id               String                @id @default(cuid())
  name             String // e.g., "Classic Base", "Quilted Base"
  shopifyPrice     Decimal               @db.Decimal(10, 2) // Base price for Shopify
  marketplacePrice Decimal               @db.Decimal(10, 2) // Base price for other marketplaces
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  collection       ShopifyCollection?
  adjustments      ShapeTypeAdjustment[]
}

model ShapeTypeAdjustment {
  id                String    @id @default(cuid())
  tierId            String
  tier              PriceTier @relation(fields: [tierId], references: [id])
  shapeType         ShapeType // DRIVER, WOOD, HYBRID, PUTTER, OTHER
  shopifyAdjustment Decimal   @db.Decimal(10, 2) // Adjustment for Shopify
  marketAdjustment  Decimal   @db.Decimal(10, 2) // Adjustment for marketplaces
  isBasePrice       Boolean   @default(false) // For fixed-price types like putters
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ProductStitching {
  id                String            @id @default(cuid())
  setId             String
  set               ProductSetDataLPC @relation(fields: [setId], references: [id], onDelete: Cascade)
  stitchingThreadId String
  stitchingThread   StitchingThread   @relation(fields: [stitchingThreadId], references: [id])
  amannId           String
  amann             AmannNumber       @relation(fields: [amannId], references: [id])

  @@index([setId])
  @@index([stitchingThreadId])
  @@index([amannId])
}

enum ImageType {
  PRIMARY // For drivers, fairways, hybrids and putters (front view)
  SECONDARY // For putters (side view)
  TERTIARY // For putters (top view)
  BACK // Universal back view
  INSIDE // Universal inside view
}

enum Marketplace {
  SHOPIFY
  ETSY
  EBAY
  ORIGINAL
}

model ProductImage {
  id                 String                 @id @default(cuid())
  setId              String?
  set                ProductSetDataLPC?     @relation("SetImages", fields: [setId], references: [id], onDelete: Cascade)
  variantId          String?
  variant            ProductVariantDataLPC? @relation("VariantImages", fields: [variantId], references: [id], onDelete: Cascade)
  imageType          ImageType
  marketplace        Marketplace
  cloudinaryUrl      String?
  cloudinaryPublicId String?
  googleDriveUrl     String?
  googleDriveId      String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  @@unique([variantId, imageType, marketplace])
  @@index([setId])
  @@index([variantId])
  @@index([marketplace])
}

model ProductSetDataLPC {
  id                   String                  @id @default(cuid())
  shopifyProductId     String
  baseSKU              String
  collections          ProductSetCollection[]
  offeringType         String
  fontId               String
  font                 Font                    @relation(fields: [fontId], references: [id])
  leatherColor1Id      String
  leatherColor1        LeatherColor            @relation("PrimaryLeatherColor", fields: [leatherColor1Id], references: [id])
  leatherColor2Id      String?
  leatherColor2        LeatherColor?           @relation("SecondaryLeatherColor", fields: [leatherColor2Id], references: [id])
  stitchingThreads     ProductStitching[]
  mainHandle           String
  setImages            ProductImage[]          @relation("SetImages")
  variants             ProductVariantDataLPC[]
  createdAt            DateTime                @default(now())
  googleDriveFolderUrl String? // URL to the Google Drive folder containing all product images
  cloudinaryFolderId   String? // ID of the Cloudinary folder containing all product images
  updatedAt            DateTime                @updatedAt

  @@index([fontId])
  @@index([leatherColor1Id])
  @@index([leatherColor2Id])
}

model ProductVariantDataLPC {
  id                 String            @id @default(cuid())
  setId              String
  set                ProductSetDataLPC @relation(fields: [setId], references: [id], onDelete: Cascade)
  shopifyVariantId   String
  shopifyInventoryId String
  SKU                String
  shapeId            String
  shape              Shape             @relation(fields: [shapeId], references: [id])
  weight             Decimal           @db.Decimal(10, 2)
  embroideryThreadId String?
  embroideryThread   EmbroideryThread? @relation(fields: [embroideryThreadId], references: [id])
  isacordId          String?
  isacord            IsacordNumber?    @relation(fields: [isacordId], references: [id])
  styleId            String?
  style              Style?            @relation(fields: [styleId], references: [id])
  colorDesignationId String?
  colorDesignation   LeatherColor?     @relation("ColorDesignation", fields: [colorDesignationId], references: [id])
  variantImages      ProductImage[]    @relation("VariantImages")

  // Custom variant fields
  customShopifyVariantId   String?
  customShopifyInventoryId String?
  customSKU                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([setId])
  @@index([shapeId])
  @@index([embroideryThreadId])
  @@index([isacordId])
  @@index([styleId])
  @@index([colorDesignationId])
}

model ProductSetCollection {
  id           String            @id @default(cuid())
  setId        String
  collectionId String
  set          ProductSetDataLPC @relation(fields: [setId], references: [id], onDelete: Cascade)
  collection   ShopifyCollection @relation(fields: [collectionId], references: [id])
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([setId, collectionId])
  @@index([setId])
  @@index([collectionId])
}

model OAuthToken {
  id           String    @id @default(cuid())
  provider     String // e.g., "google"
  refreshToken String    @db.Text
  accessToken  String?   @db.Text
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([provider])
}
