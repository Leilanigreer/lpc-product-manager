generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model LeatherColor {
  id                      String           @id @default(cuid())
  name                    String
  abbreviation            String
  image_url               String?
  isLimitedEditionLeather Boolean          @default(false)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  colorTags               ColorTag[]       @relation("LeatherColorToTag")
  first_leather_color     ProductDataLPC[] @relation("PrimaryLeatherColor")
  second_leather_color    ProductDataLPC[] @relation("SecondaryLeatherColor")
  quilted_leather_color   ProductDataLPC[] @relation("QuiltedLeatherColor")
}

model StitchingThread {
  id           String        @id @default(cuid())
  name         String
  abbreviation String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  colorTags    ColorTag[]    @relation("StitchingThreadToTag")
  amannNumbers AmannNumber[]
}

model EmbroideryThread {
  id             String          @id @default(cuid())
  name           String
  abbreviation   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  colorTags      ColorTag[]      @relation("EmbroideryThreadToTag")
  isacordNumbers IsacordNumber[]
}

model IsacordNumber {
  id             String           @id @default(cuid())
  number         String
  threadId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  thread         EmbroideryThread @relation(fields: [threadId], references: [id])
  ProductDataLPC ProductDataLPC[]

  @@index([threadId])
}

model AmannNumber {
  id             String           @id @default(cuid())
  number         String
  threadId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  thread         StitchingThread  @relation(fields: [threadId], references: [id])
  ProductDataLPC ProductDataLPC[]

  @@index([threadId])
}

model ColorTag {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  embroideryColors EmbroideryThread[] @relation("EmbroideryThreadToTag")
  leatherColors    LeatherColor[]     @relation("LeatherColorToTag")
  stitchingColors  StitchingThread[]  @relation("StitchingThreadToTag")
}

model Font {
  id             String           @id @default(cuid())
  name           String
  image_url      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductDataLPC ProductDataLPC[]
}

enum ShapeType {
  WOOD
  PUTTER
  OTHER
}

model Shape {
  id             String           @id @default(cuid())
  name           String
  displayOrder   Int              @default(0) // Controls ordering
  abbreviation   String?
  shapeType      ShapeType        @default(OTHER) // For wood/putter logic
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  productPrices  ProductPrice[]
  ProductDataLPC ProductDataLPC[]
}

model Style {
  id             String            @id @default(cuid())
  name           String
  abbreviation   String
  image_url      String?
  stylePerShape  Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  ProductDataLPC ProductDataLPC[]
  collections    StyleCollection[]
}

model StyleCollection {
  id                       String            @id @default(cuid())
  styleId                  String
  collectionId             String
  overrideSecondaryLeather Boolean?
  overrideStitchingColor   Boolean?
  overrideQClassicField    Boolean?
  titleTemplate            String? // Override collection title template if needed
  seoTemplate              String? // Override collection SEO template if needed
  handleTemplate           String? // Override collection handle template if needed
  validation               Json? // Override validation rules if needed
  style                    Style             @relation(fields: [styleId], references: [id])
  collection               ShopifyCollection @relation(fields: [collectionId], references: [id])
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt

  @@unique([styleId, collectionId])
  @@index([styleId])
  @@index([collectionId])
}

enum ThreadType {
  EMBROIDERY
  STITCHING
  NONE
}

model ShopifyCollection {
  id                    String                 @id @default(cuid())
  shopifyId             String
  title                 String
  handle                String                 @unique
  skuPrefix             String?
  threadType            ThreadType             @default(NONE)
  description           String?                @db.Text
  commonDescription     Boolean                @default(true)
  needsSecondaryLeather Boolean                @default(false)
  needsStitchingColor   Boolean                @default(false)
  needsQClassicField    Boolean                @default(false)
  needsStyle            Boolean                @default(false)
  showInDropdown        Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  admin_graphql_api_id  String
  productPrices         ProductPrice[]
  ProductDataLPC        ProductDataLPC[]
  styles                StyleCollection[]
  titleFormat           CollectionTitleFormat?

  @@map("ShopifyCollections")
}

model CommonDescription {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String   @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollectionTitleFormat {
  id             String            @id @default(cuid())
  collection     ShopifyCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId   String            @unique
  titleTemplate  String // e.g. "{leatherColor1} with {leatherColor2} Leather"
  seoTemplate    String // e.g. "{title} Quilted Golf Headcovers"
  handleTemplate String // e.g. "{handle}-quilted-golf-headcovers"
  validation     Json // Stores validation rules as JSON
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([collectionId])
}

model ProductPrice {
  id                  String             @id @default(cuid())
  shopifyPrice        Decimal            @db.Decimal(10, 2)
  higherPrice         Decimal            @db.Decimal(10, 2)
  shapeId             String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  shopifyCollectionId String?
  shape               Shape              @relation(fields: [shapeId], references: [id])
  shopifyCollection   ShopifyCollection? @relation(fields: [shopifyCollectionId], references: [id])
}

model ProductDataLPC {
  id                    String            @id @default(cuid())
  shopifyProductId      String
  shopifyVariantId      String
  shopifyInventoryId    String
  SKU                   String
  baseSKU               String?
  collectionId          String
  collection            ShopifyCollection @relation(fields: [collectionId], references: [id])
  offeringType          String
  fontId                String
  font                  Font              @relation(fields: [fontId], references: [id])
  shapeId               String
  shape                 Shape             @relation(fields: [shapeId], references: [id])
  weight                Decimal           @db.Decimal(10, 2)
  leatherColor1Id       String
  leatherColor1         LeatherColor      @relation("PrimaryLeatherColor", fields: [leatherColor1Id], references: [id])
  leatherColor2Id       String?
  leatherColor2         LeatherColor?     @relation("SecondaryLeatherColor", fields: [leatherColor2Id], references: [id])
  amannId               String?
  amann                 AmannNumber?      @relation(fields: [amannId], references: [id])
  isacordId             String?
  isacord               IsacordNumber?    @relation(fields: [isacordId], references: [id])
  styleId               String?
  style                 Style?            @relation(fields: [styleId], references: [id])
  quiltedLeatherColorId String?
  quiltedLeatherColor   LeatherColor?     @relation("QuiltedLeatherColor", fields: [quiltedLeatherColorId], references: [id])
  mainHandle            String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([collectionId])
  @@index([fontId])
  @@index([shapeId])
  @@index([leatherColor1Id])
  @@index([leatherColor2Id])
  @@index([amannId])
  @@index([isacordId])
  @@index([styleId])
  @@index([quiltedLeatherColorId])
}
