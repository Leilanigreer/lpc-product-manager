generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model LeatherColor {
  id                      String           @id @default(cuid())
  name                    String
  abbreviation            String
  url_id                  String?
  isLimitedEditionLeather Boolean          @default(false)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  colorTags               ColorTag[]       @relation("LeatherColorToTag")
  first_leather_color     ProductDataLPC[] @relation("PrimaryLeatherColor")
  second_leather_color    ProductDataLPC[] @relation("SecondaryLeatherColor")
  color_designation       ProductDataLPC[] @relation("ColorDesignation")
}

model StitchingThread {
  id               String             @id @default(cuid())
  name             String
  abbreviation     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  colorTags        ColorTag[]         @relation("StitchingThreadToTag")
  amannNumbers     AmannNumber[]
  productStitching ProductStitching[]
}

model EmbroideryThread {
  id             String           @id @default(cuid())
  name           String
  abbreviation   String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  colorTags      ColorTag[]       @relation("EmbroideryThreadToTag")
  isacordNumbers IsacordNumber[]
  ProductDataLPC ProductDataLPC[]
}

model IsacordNumber {
  id              String            @id @default(cuid())
  number          String
  threadId        String?
  wawakColorName  String?
  wawakItemNumber String?
  isStockThread   Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  thread          EmbroideryThread? @relation(fields: [threadId], references: [id])
  ProductDataLPC  ProductDataLPC[]

  @@index([threadId])
}

model AmannNumber {
  id               String             @id @default(cuid())
  number           String
  threadId         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  thread           StitchingThread    @relation(fields: [threadId], references: [id])
  ProductStitching ProductStitching[]

  @@index([threadId])
}

model ColorTag {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  embroideryColors EmbroideryThread[] @relation("EmbroideryThreadToTag")
  leatherColors    LeatherColor[]     @relation("LeatherColorToTag")
  stitchingColors  StitchingThread[]  @relation("StitchingThreadToTag")
}

model Font {
  id             String           @id @default(cuid())
  name           String
  url_id         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductDataLPC ProductDataLPC[]
}

enum ShapeType {
  DRIVER // Base price point
  WOOD // -10 from base
  HYBRID // -15 from base
  PUTTER // Fixed price or base, whichever is higher
  OTHER // Keep for flexibility
}

model Shape {
  id             String           @id @default(cuid())
  name           String
  displayOrder   Int              @default(0) // Controls ordering
  abbreviation   String?
  shapeType      ShapeType        @default(OTHER) // For wood/putter & pricing logic
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductDataLPC ProductDataLPC[]
}

enum StyleNamePattern {
  STANDARD // "{leather.label} {style.leatherPhrase} {style.label}"
  STYLE_FIRST // "{style.label} with {leather.label} {style.leatherPhrase}"
  CUSTOM // Uses custom pattern
}

model Style {
  id                 String            @id @default(cuid())
  name               String
  abbreviation       String
  url_id             String?
  useOppositeLeather Boolean           @default(false) // For "Fat" style logic
  leatherPhrase      String? // For "50/50" style phrase
  namePattern        StyleNamePattern  @default(STANDARD)
  customNamePattern  String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  ProductDataLPC     ProductDataLPC[]
  collections        StyleCollection[]
}

model StyleCollection {
  id                        String            @id @default(cuid())
  styleId                   String
  collectionId              String
  overrideSecondaryLeather  Boolean?
  overrideStitchingColor    Boolean?
  overrideColorDesignation  Boolean?
  skuPattern                String?
  titleTemplate             String? // Override collection title template if needed
  seoTemplate               String? // Override collection SEO template if needed
  handleTemplate            String? // Override collection handle template if needed
  validation                Json? // Override validation rules if needed
  overrideNamePattern       StyleNamePattern? // Override collection default
  overrideCustomNamePattern String? // Used with CUSTOM pattern
  style                     Style             @relation(fields: [styleId], references: [id])
  collection                ShopifyCollection @relation(fields: [collectionId], references: [id])
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt

  @@unique([styleId, collectionId])
  @@index([styleId])
  @@index([collectionId])
}

enum ThreadType {
  EMBROIDERY
  STITCHING
  NONE
}

model ShopifyCollection {
  id                      String                 @id @default(cuid())
  shopifyId               String
  title                   String
  handle                  String                 @unique
  skuPattern              String?
  threadType              ThreadType             @default(NONE)
  description             String?                @db.Text
  commonDescription       Boolean                @default(true)
  needsSecondaryLeather   Boolean                @default(false)
  needsStitchingColor     Boolean                @default(false)
  needsColorDesignation   Boolean                @default(false)
  needsStyle              Boolean                @default(false)
  defaultStyleNamePattern StyleNamePattern       @default(STANDARD)
  stylePerCollection      Boolean                @default(false) // For handling grouped styles
  showInDropdown          Boolean                @default(true)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  admin_graphql_api_id    String
  ProductDataLPC          ProductDataLPC[]
  styles                  StyleCollection[]
  titleFormat             CollectionTitleFormat?
  PriceTier               PriceTier?             @relation(fields: [priceTierId], references: [id])
  priceTierId             String?                @unique

  @@map("ShopifyCollections")
}

model CommonDescription {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String   @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollectionTitleFormat {
  id             String            @id @default(cuid())
  collection     ShopifyCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId   String            @unique
  titleTemplate  String // e.g. "{leatherColor1} with {leatherColor2} Leather"
  seoTemplate    String // e.g. "{title} Quilted Golf Headcovers"
  handleTemplate String // e.g. "{handle}-quilted-golf-headcovers"
  validation     Json // Stores validation rules as JSON
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([collectionId])
}

model PriceTier {
  id               String                @id @default(cuid())
  name             String // e.g., "Classic Base", "Quilted Base"
  shopifyPrice     Decimal               @db.Decimal(10, 2) // Base price for Shopify
  marketplacePrice Decimal               @db.Decimal(10, 2) // Base price for other marketplaces
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  collection       ShopifyCollection?
  adjustments      ShapeTypeAdjustment[]
}

model ShapeTypeAdjustment {
  id                String    @id @default(cuid())
  tierId            String
  tier              PriceTier @relation(fields: [tierId], references: [id])
  shapeType         ShapeType // DRIVER, WOOD, HYBRID, PUTTER, OTHER
  shopifyAdjustment Decimal   @db.Decimal(10, 2) // Adjustment for Shopify
  marketAdjustment  Decimal   @db.Decimal(10, 2) // Adjustment for marketplaces
  isBasePrice       Boolean   @default(false) // For fixed-price types like putters
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ProductStitching {
  id                String          @id @default(cuid())
  productDataLPCId  String
  productDataLPC    ProductDataLPC  @relation(fields: [productDataLPCId], references: [id], onDelete: Cascade)
  stitchingThreadId String
  stitchingThread   StitchingThread @relation(fields: [stitchingThreadId], references: [id])
  amannId           String
  amann             AmannNumber     @relation(fields: [amannId], references: [id])

  @@index([productDataLPCId])
  @@index([stitchingThreadId])
  @@index([amannId])
}

model ProductDataLPC {
  id                 String             @id @default(cuid())
  shopifyProductId   String
  shopifyVariantId   String
  shopifyInventoryId String
  SKU                String
  baseSKU            String?
  collectionId       String
  collection         ShopifyCollection  @relation(fields: [collectionId], references: [id])
  offeringType       String
  fontId             String
  font               Font               @relation(fields: [fontId], references: [id])
  shapeId            String
  shape              Shape              @relation(fields: [shapeId], references: [id])
  weight             Decimal            @db.Decimal(10, 2)
  leatherColor1Id    String
  leatherColor1      LeatherColor       @relation("PrimaryLeatherColor", fields: [leatherColor1Id], references: [id])
  leatherColor2Id    String?
  leatherColor2      LeatherColor?      @relation("SecondaryLeatherColor", fields: [leatherColor2Id], references: [id])
  // Single embroidery thread with its isacord number
  embroideryThreadId String?
  embroideryThread   EmbroideryThread?  @relation(fields: [embroideryThreadId], references: [id])
  isacordId          String?
  isacord            IsacordNumber?     @relation(fields: [isacordId], references: [id])
  // Multiple stitching threads with their amann numbers
  stitchingThreads   ProductStitching[]
  styleId            String?
  style              Style?             @relation(fields: [styleId], references: [id])
  colorDesignationId String?
  colorDesignation   LeatherColor?      @relation("ColorDesignation", fields: [colorDesignationId], references: [id])
  mainHandle         String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([collectionId])
  @@index([fontId])
  @@index([shapeId])
  @@index([leatherColor1Id])
  @@index([leatherColor2Id])
  @@index([embroideryThreadId])
  @@index([isacordId])
  @@index([styleId])
  @@index([colorDesignationId])
}

enum OptionType {
  FILE_UPLOAD
  CHECKBOX
  DROPDOWN
  IMAGE_SWATCH
  COLOR_SWATCH
  RADIO_BUTTON
  BUTTON
  TEXT_BOX
  NUMBER_FIELD
  DATE_PICKER
}

model OptionLayout {
  id                      String     @id @default(cuid())
  type                    OptionType
  optionName              Boolean    @default(true)
  nickname                Boolean    @default(true)
  required                Boolean    @default(true)
  description             Boolean    @default(true)
  inCartName              Boolean    @default(true)
  associatedProductId     Boolean    @default(true)
  allowedTypes            Boolean    @default(false)
  minSelectable           Boolean    @default(false)
  maxSelectable           Boolean    @default(false)
  default                 Boolean    @default(false)
  image                   Boolean    @default(false)
  allowMultipleSelections Boolean    @default(false)
  color                   Boolean    @default(false)
  placeholderText         Boolean    @default(false)
  minCharLimit            Boolean    @default(false)
  maxCharLimit            Boolean    @default(false)
  minNumber               Boolean    @default(false)
  maxNumber               Boolean    @default(false)
  optionValues            Boolean    @default(false)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  Option                  Option[]

  @@map("option_layouts")
}

model Option {
  id              String        @id @default(cuid())
  name            String
  nickname        String?
  required        Boolean
  description     String?
  inCartName      String?
  allowedTypes    String?
  minSelection    Int?
  maxSelection    Int?
  allowMultiple   Boolean?
  placeholderText String?
  minCharacters   Int?
  maxCharacters   Int?
  minNumber       Int?
  maxNumber       Int?
  layoutId        String
  layout          OptionLayout  @relation(fields: [layoutId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  OptionValue     OptionValue[]
}

model OptionValue {
  id                  String   @id @default(cuid())
  name                String?
  displayOrder        Int?
  associatedProductId String?
  default             Boolean  @default(false)
  imageUrl            String?
  optionId            String
  option              Option   @relation(fields: [optionId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
